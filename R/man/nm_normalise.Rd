% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nm_normalise.r
\name{nm_normalise}
\alias{nm_normalise}
\title{Normalize the Dataset Using the Trained Model}
\usage{
nm_normalise(
  df = NULL,
  model = NULL,
  feature_names = NULL,
  variables_resample = NULL,
  n_samples = 300,
  replace = TRUE,
  aggregate = TRUE,
  seed = 7654321,
  n_cores = NULL,
  weather_df = NULL,
  verbose = TRUE
)
}
\arguments{
\item{df}{Input data frame.}

\item{model}{The trained model object.}

\item{feature_names}{The names of the features used for normalization.}

\item{variables_resample}{The names of the variables to be resampled for normalization.}

\item{n_samples}{Number of samples to generate. Default is 300.}

\item{replace}{Logical indicating whether to sample with replacement. Default is TRUE.}

\item{aggregate}{Logical indicating whether to aggregate the results. Default is TRUE.}

\item{seed}{A random seed for reproducibility. Default is 7654321.}

\item{n_cores}{Number of CPU cores to use for parallel processing. Default is system's total minus one.}

\item{weather_df}{Optional data frame containing weather data for resampling.}

\item{verbose}{Should the function print progress messages? Default is TRUE.}
}
\value{
A data frame containing the normalized data.
}
\description{
\code{nm_normalise} normalizes the dataset using the trained model and generates resampled data in parallel.
}
\examples{
\dontrun{
library(dplyr)
library(lubridate)
df <- data.frame(
  date = Sys.time() + seq(1, 100, by = 1),
  temp = rnorm(100),
  humidity = rnorm(100)
)
model <- lm(temp ~ humidity, data = df)
normalized_df <- nm_normalise(df, model, feature_names = c("temp", "humidity"), n_samples = 300, replace = TRUE, seed = 12345)
}
}
